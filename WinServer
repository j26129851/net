#include <stdio.h>
#include <winsock2.h>

#pragma comment(lib, "ws2_32.lib")

int main() {
    WSADATA wsa;
    SOCKET server_socket;
    struct sockaddr_in server_addr;

    // 初始化 Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0) {
        printf("WSAStartup failed\n");
        return 1;
    }

    // 創建socket
    if ((server_socket = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET) {
        printf("Socket creation failed\n");
        return 1;
    }

    // 設定IP
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(8080);

    // 百定Socket
    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        printf("Bind failed\n");
        return 1;
    }

    // 監聽
    if (listen(server_socket, SOMAXCONN) == SOCKET_ERROR) {
        printf("Listen failed\n");
        return 1;
    }

    printf("Server started. Waiting for connections...\n");

    while (1) {
        SOCKET client_socket;
        struct sockaddr_in client_addr;
        int addr_len = sizeof(client_addr);

        if ((client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &addr_len)) == INVALID_SOCKET) {
            printf("Accept failed\n");
            return 1;
        }

        printf("Client connected\n");

        // 跑迴圈接收和回覆
        while (1) {
            // 接收客戶端訊息
            char buffer[1024];
            int recv_size = recv(client_socket, buffer, sizeof(buffer), 0);
            if (recv_size <= 0) {
                printf("Client disconnected\n");
                break; // 斷開連結取消迴圈
            }
            buffer[recv_size] = '\0';
            printf("Message from client: %s\n", buffer);

            // 回覆訊息並加上[readed]
            char reply_buffer[1024];
            sprintf(reply_buffer, "%s[readed]", buffer);
            send(client_socket, reply_buffer, strlen(reply_buffer), 0);
        }

        closesocket(client_socket);
    }

    closesocket(server_socket);
    WSACleanup();

    return 0;
}
